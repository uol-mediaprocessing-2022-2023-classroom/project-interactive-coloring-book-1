import os
import ssl
import urllib.parse
import urllib.request

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from starlette.background import BackgroundTasks
from PIL import Image

from app import applySegmentation

app = FastAPI()
ssl._create_default_https_context = ssl._create_unverified_context

# List of URLs which have access to this API
origins = [
    "https://localhost:8080",
    "http://localhost:8080/",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
def home():
    return {"Test": "test"}


# Endpoint for retrieving a blurred version of an image
# The image is fetched from the URL in the post body and a blur is applied to it, the result is returned
@app.get("/get-blur/{cldId}/{imgId}/{difficulty}")
async def get_blur(cldId, imgId, difficulty, background_tasks: BackgroundTasks):
    img_path = 'app/bib/' + imgId + ".jpg"
    image_url = "https://cmp.photoprintit.com/api/photos/" + imgId + ".org?size=original&errorImage=false&cldId=" + cldId + "&clientVersion=0.0.0-uni_webapp_demo"

    urllib.request.urlretrieve(image_url, img_path)

    print(difficulty)
    k = 15
    zonen_toleranz = 100
    narrow_toleranz = 10

if int(difficulty) == 1:
        k = 10
        zonen_toleranz = 100
        narrow_toleranz = 15
    elif int(difficulty) == 2:
        k = 15
        zonen_toleranz = 50
        narrow_toleranz = 5
    elif int(difficulty) == 3:
        k = 20
        zonen_toleranz = 30
        narrow_toleranz = 5

    print('begin...')
    print(k, zonen_toleranz, narrow_toleranz)
    applySegmentation.create_segments(img_path, k, zonen_toleranz, narrow_toleranz)
    print('...done')
    returnImage = Image.open('Ergebnis.jpg')

    returnImage.save(img_path)

    return FileResponse(img_path)


# Delete a file
def remove_file(path: str) -> None:
    os.unlink(path)
